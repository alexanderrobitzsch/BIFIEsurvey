// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_BIFIEsurvey_RCPPEXPORTS_H_GEN_
#define RCPP_BIFIEsurvey_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace BIFIEsurvey {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("BIFIEsurvey", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in BIFIEsurvey");
            }
        }
    }

    inline Rcpp::List univar_multiple_V2group(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values) {
        typedef SEXP(*Ptr_univar_multiple_V2group)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_univar_multiple_V2group p_univar_multiple_V2group = NULL;
        if (p_univar_multiple_V2group == NULL) {
            validateSignature("Rcpp::List(*univar_multiple_V2group)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_univar_multiple_V2group = (Ptr_univar_multiple_V2group)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_univar_multiple_V2group");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_univar_multiple_V2group(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_freq(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values, Rcpp::NumericMatrix vars_values, Rcpp::NumericVector vars_values_numb) {
        typedef SEXP(*Ptr_bifie_freq)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_freq p_bifie_freq = NULL;
        if (p_bifie_freq == NULL) {
            validateSignature("Rcpp::List(*bifie_freq)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericMatrix,Rcpp::NumericVector)");
            p_bifie_freq = (Ptr_bifie_freq)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_freq");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_freq(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(vars_values)), Shield<SEXP>(Rcpp::wrap(vars_values_numb)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_correl(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values) {
        typedef SEXP(*Ptr_bifie_correl)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_correl p_bifie_correl = NULL;
        if (p_bifie_correl == NULL) {
            validateSignature("Rcpp::List(*bifie_correl)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_bifie_correl = (Ptr_bifie_correl)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_correl");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_correl(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_linreg(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector dep_index, Rcpp::NumericVector pre_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values) {
        typedef SEXP(*Ptr_bifie_linreg)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_linreg p_bifie_linreg = NULL;
        if (p_bifie_linreg == NULL) {
            validateSignature("Rcpp::List(*bifie_linreg)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_bifie_linreg = (Ptr_bifie_linreg)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_linreg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_linreg(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(dep_index)), Shield<SEXP>(Rcpp::wrap(pre_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_waldtest(Rcpp::NumericMatrix parsM, Rcpp::NumericMatrix parsrepM, Rcpp::NumericMatrix Cdes, Rcpp::NumericVector rdes, Rcpp::NumericVector Ccols, Rcpp::NumericVector fayfac) {
        typedef SEXP(*Ptr_bifie_waldtest)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_waldtest p_bifie_waldtest = NULL;
        if (p_bifie_waldtest == NULL) {
            validateSignature("Rcpp::List(*bifie_waldtest)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_bifie_waldtest = (Ptr_bifie_waldtest)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_waldtest");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_waldtest(Shield<SEXP>(Rcpp::wrap(parsM)), Shield<SEXP>(Rcpp::wrap(parsrepM)), Shield<SEXP>(Rcpp::wrap(Cdes)), Shield<SEXP>(Rcpp::wrap(rdes)), Shield<SEXP>(Rcpp::wrap(Ccols)), Shield<SEXP>(Rcpp::wrap(fayfac)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_comp_vcov_within(Rcpp::NumericMatrix parsM, Rcpp::NumericMatrix parsrepM, Rcpp::NumericVector fayfac, int RR, int Nimp) {
        typedef SEXP(*Ptr_bifie_comp_vcov_within)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_comp_vcov_within p_bifie_comp_vcov_within = NULL;
        if (p_bifie_comp_vcov_within == NULL) {
            validateSignature("Rcpp::List(*bifie_comp_vcov_within)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,int,int)");
            p_bifie_comp_vcov_within = (Ptr_bifie_comp_vcov_within)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_comp_vcov_within");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_comp_vcov_within(Shield<SEXP>(Rcpp::wrap(parsM)), Shield<SEXP>(Rcpp::wrap(parsrepM)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(RR)), Shield<SEXP>(Rcpp::wrap(Nimp)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_comp_vcov(Rcpp::NumericMatrix parsM, Rcpp::NumericMatrix parsrepM, Rcpp::NumericMatrix Cdes, Rcpp::NumericVector rdes, Rcpp::NumericVector Ccols, Rcpp::NumericVector fayfac) {
        typedef SEXP(*Ptr_bifie_comp_vcov)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_comp_vcov p_bifie_comp_vcov = NULL;
        if (p_bifie_comp_vcov == NULL) {
            validateSignature("Rcpp::List(*bifie_comp_vcov)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_bifie_comp_vcov = (Ptr_bifie_comp_vcov)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_comp_vcov");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_comp_vcov(Shield<SEXP>(Rcpp::wrap(parsM)), Shield<SEXP>(Rcpp::wrap(parsrepM)), Shield<SEXP>(Rcpp::wrap(Cdes)), Shield<SEXP>(Rcpp::wrap(rdes)), Shield<SEXP>(Rcpp::wrap(Ccols)), Shield<SEXP>(Rcpp::wrap(fayfac)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_test_univar(Rcpp::NumericMatrix mean1M, Rcpp::NumericMatrix sd1M, Rcpp::NumericMatrix sumweightM, int GG, Rcpp::NumericVector group_values, Rcpp::NumericMatrix mean1repM, Rcpp::NumericMatrix sd1repM, Rcpp::NumericMatrix sumweightrepM, Rcpp::NumericVector fayfac) {
        typedef SEXP(*Ptr_bifie_test_univar)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_test_univar p_bifie_test_univar = NULL;
        if (p_bifie_test_univar == NULL) {
            validateSignature("Rcpp::List(*bifie_test_univar)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,int,Rcpp::NumericVector,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector)");
            p_bifie_test_univar = (Ptr_bifie_test_univar)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_test_univar");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_test_univar(Shield<SEXP>(Rcpp::wrap(mean1M)), Shield<SEXP>(Rcpp::wrap(sd1M)), Shield<SEXP>(Rcpp::wrap(sumweightM)), Shield<SEXP>(Rcpp::wrap(GG)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(mean1repM)), Shield<SEXP>(Rcpp::wrap(sd1repM)), Shield<SEXP>(Rcpp::wrap(sumweightrepM)), Shield<SEXP>(Rcpp::wrap(fayfac)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_crosstab(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_values1, Rcpp::NumericVector vars_index1, Rcpp::NumericVector vars_values2, Rcpp::NumericVector vars_index2, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values) {
        typedef SEXP(*Ptr_bifie_crosstab)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_crosstab p_bifie_crosstab = NULL;
        if (p_bifie_crosstab == NULL) {
            validateSignature("Rcpp::List(*bifie_crosstab)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_bifie_crosstab = (Ptr_bifie_crosstab)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_crosstab");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_crosstab(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_values1)), Shield<SEXP>(Rcpp::wrap(vars_index1)), Shield<SEXP>(Rcpp::wrap(vars_values2)), Shield<SEXP>(Rcpp::wrap(vars_index2)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_by(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values, Rcpp::Function userfct) {
        typedef SEXP(*Ptr_bifie_by)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_by p_bifie_by = NULL;
        if (p_bifie_by == NULL) {
            validateSignature("Rcpp::List(*bifie_by)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::Function)");
            p_bifie_by = (Ptr_bifie_by)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_by");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_by(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(userfct)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_hist(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values, Rcpp::NumericVector breaks) {
        typedef SEXP(*Ptr_bifie_hist)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_hist p_bifie_hist = NULL;
        if (p_bifie_hist == NULL) {
            validateSignature("Rcpp::List(*bifie_hist)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_bifie_hist = (Ptr_bifie_hist)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_hist");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_hist(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(breaks)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_ecdf(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values, Rcpp::NumericVector breaks, int quanttype, int maxval) {
        typedef SEXP(*Ptr_bifie_ecdf)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_ecdf p_bifie_ecdf = NULL;
        if (p_bifie_ecdf == NULL) {
            validateSignature("Rcpp::List(*bifie_ecdf)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,int,int)");
            p_bifie_ecdf = (Ptr_bifie_ecdf)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_ecdf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_ecdf(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(breaks)), Shield<SEXP>(Rcpp::wrap(quanttype)), Shield<SEXP>(Rcpp::wrap(maxval)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_logistreg(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector dep_index, Rcpp::NumericVector pre_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values, double eps, int maxiter) {
        typedef SEXP(*Ptr_bifie_logistreg)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_logistreg p_bifie_logistreg = NULL;
        if (p_bifie_logistreg == NULL) {
            validateSignature("Rcpp::List(*bifie_logistreg)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,double,int)");
            p_bifie_logistreg = (Ptr_bifie_logistreg)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_logistreg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_logistreg(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(dep_index)), Shield<SEXP>(Rcpp::wrap(pre_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(maxiter)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_fasttable(Rcpp::NumericMatrix datavec) {
        typedef SEXP(*Ptr_bifie_fasttable)(SEXP);
        static Ptr_bifie_fasttable p_bifie_fasttable = NULL;
        if (p_bifie_fasttable == NULL) {
            validateSignature("Rcpp::List(*bifie_fasttable)(Rcpp::NumericMatrix)");
            p_bifie_fasttable = (Ptr_bifie_fasttable)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_fasttable");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_fasttable(Shield<SEXP>(Rcpp::wrap(datavec)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_table1_character(Rcpp::CharacterVector datavec) {
        typedef SEXP(*Ptr_bifie_table1_character)(SEXP);
        static Ptr_bifie_table1_character p_bifie_table1_character = NULL;
        if (p_bifie_table1_character == NULL) {
            validateSignature("Rcpp::List(*bifie_table1_character)(Rcpp::CharacterVector)");
            p_bifie_table1_character = (Ptr_bifie_table1_character)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_table1_character");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_table1_character(Shield<SEXP>(Rcpp::wrap(datavec)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_mla2(Rcpp::NumericMatrix X_list, Rcpp::NumericMatrix Z_list, Rcpp::NumericVector y_list, Rcpp::NumericVector wgttot, Rcpp::NumericVector wgtlev2, Rcpp::NumericVector wgtlev1, double globconv, int maxiter, Rcpp::NumericVector group, Rcpp::NumericVector group_values, Rcpp::NumericVector cluster, Rcpp::NumericMatrix wgtrep, int Nimp, Rcpp::NumericVector fayfac, Rcpp::NumericMatrix recov_constraint, int is_rcov_constraint) {
        typedef SEXP(*Ptr_bifie_mla2)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_mla2 p_bifie_mla2 = NULL;
        if (p_bifie_mla2 == NULL) {
            validateSignature("Rcpp::List(*bifie_mla2)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,double,int,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericMatrix,int,Rcpp::NumericVector,Rcpp::NumericMatrix,int)");
            p_bifie_mla2 = (Ptr_bifie_mla2)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_mla2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_mla2(Shield<SEXP>(Rcpp::wrap(X_list)), Shield<SEXP>(Rcpp::wrap(Z_list)), Shield<SEXP>(Rcpp::wrap(y_list)), Shield<SEXP>(Rcpp::wrap(wgttot)), Shield<SEXP>(Rcpp::wrap(wgtlev2)), Shield<SEXP>(Rcpp::wrap(wgtlev1)), Shield<SEXP>(Rcpp::wrap(globconv)), Shield<SEXP>(Rcpp::wrap(maxiter)), Shield<SEXP>(Rcpp::wrap(group)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(cluster)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(Nimp)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(recov_constraint)), Shield<SEXP>(Rcpp::wrap(is_rcov_constraint)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List bifie_pathmodel(Rcpp::NumericMatrix datalist, Rcpp::NumericMatrix wgt1, Rcpp::NumericMatrix wgtrep, Rcpp::NumericVector vars_index, Rcpp::NumericVector fayfac, Rcpp::NumericVector NI, Rcpp::NumericVector group_index1, Rcpp::NumericVector group_values, Rcpp::NumericMatrix L, Rcpp::NumericVector L_row_index, int NL, Rcpp::NumericMatrix E, Rcpp::NumericMatrix R, Rcpp::NumericVector R_row_index, Rcpp::NumericMatrix coeff_index, int NP0, Rcpp::NumericVector unreliability) {
        typedef SEXP(*Ptr_bifie_pathmodel)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bifie_pathmodel p_bifie_pathmodel = NULL;
        if (p_bifie_pathmodel == NULL) {
            validateSignature("Rcpp::List(*bifie_pathmodel)(Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericVector,Rcpp::NumericMatrix,Rcpp::NumericVector,int,Rcpp::NumericMatrix,Rcpp::NumericMatrix,Rcpp::NumericVector,Rcpp::NumericMatrix,int,Rcpp::NumericVector)");
            p_bifie_pathmodel = (Ptr_bifie_pathmodel)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifie_pathmodel");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifie_pathmodel(Shield<SEXP>(Rcpp::wrap(datalist)), Shield<SEXP>(Rcpp::wrap(wgt1)), Shield<SEXP>(Rcpp::wrap(wgtrep)), Shield<SEXP>(Rcpp::wrap(vars_index)), Shield<SEXP>(Rcpp::wrap(fayfac)), Shield<SEXP>(Rcpp::wrap(NI)), Shield<SEXP>(Rcpp::wrap(group_index1)), Shield<SEXP>(Rcpp::wrap(group_values)), Shield<SEXP>(Rcpp::wrap(L)), Shield<SEXP>(Rcpp::wrap(L_row_index)), Shield<SEXP>(Rcpp::wrap(NL)), Shield<SEXP>(Rcpp::wrap(E)), Shield<SEXP>(Rcpp::wrap(R)), Shield<SEXP>(Rcpp::wrap(R_row_index)), Shield<SEXP>(Rcpp::wrap(coeff_index)), Shield<SEXP>(Rcpp::wrap(NP0)), Shield<SEXP>(Rcpp::wrap(unreliability)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector bifiesurvey_rcpp_replication_variance(Rcpp::NumericVector pars, Rcpp::NumericMatrix pars_repl, Rcpp::NumericVector fay_factor) {
        typedef SEXP(*Ptr_bifiesurvey_rcpp_replication_variance)(SEXP,SEXP,SEXP);
        static Ptr_bifiesurvey_rcpp_replication_variance p_bifiesurvey_rcpp_replication_variance = NULL;
        if (p_bifiesurvey_rcpp_replication_variance == NULL) {
            validateSignature("Rcpp::NumericVector(*bifiesurvey_rcpp_replication_variance)(Rcpp::NumericVector,Rcpp::NumericMatrix,Rcpp::NumericVector)");
            p_bifiesurvey_rcpp_replication_variance = (Ptr_bifiesurvey_rcpp_replication_variance)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifiesurvey_rcpp_replication_variance");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifiesurvey_rcpp_replication_variance(Shield<SEXP>(Rcpp::wrap(pars)), Shield<SEXP>(Rcpp::wrap(pars_repl)), Shield<SEXP>(Rcpp::wrap(fay_factor)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::List bifiesurvey_rcpp_rubin_rules(Rcpp::NumericMatrix estimates, Rcpp::NumericMatrix variances) {
        typedef SEXP(*Ptr_bifiesurvey_rcpp_rubin_rules)(SEXP,SEXP);
        static Ptr_bifiesurvey_rcpp_rubin_rules p_bifiesurvey_rcpp_rubin_rules = NULL;
        if (p_bifiesurvey_rcpp_rubin_rules == NULL) {
            validateSignature("Rcpp::List(*bifiesurvey_rcpp_rubin_rules)(Rcpp::NumericMatrix,Rcpp::NumericMatrix)");
            p_bifiesurvey_rcpp_rubin_rules = (Ptr_bifiesurvey_rcpp_rubin_rules)R_GetCCallable("BIFIEsurvey", "_BIFIEsurvey_bifiesurvey_rcpp_rubin_rules");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bifiesurvey_rcpp_rubin_rules(Shield<SEXP>(Rcpp::wrap(estimates)), Shield<SEXP>(Rcpp::wrap(variances)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_BIFIEsurvey_RCPPEXPORTS_H_GEN_
